class CommentForm extends React.Component{
        constructor(props) {
            super(props);
    
            
          
          
            this.handleSubmit = this.handleSubmit.bind(this);
        }
        
        
        handleSubmit(values) {
            console.log('Current state is: ' + JSON.stringify(values));
            alert('Current state is: ' + JSON.stringify(values));
        }
         render(){
             return(
        
                    <div className="group">
                        
                        <LocalForm onSubmit={values => this.handleSubmit(values)}>
                            <Row className="form-group">
                                <Label htmlFor="rating" md={2}>Rating</Label>
                                <Col md={10}>
                                    <Control.Select model=".rating" id="rating" name="rating"
                                    className="form-control">
                                        <option>1</option>
                                        <option>2</option>
                                        <option>3</option>
                                        <option>4</option>
                                        <option>5</option>
                                    </Control.Select>
                                </Col>
                            </Row>
                            <Row className="form-group">
                                <Label htmlFor="author" md={2}>Your Name</Label>
                                <Col md={10}>
                                    <Control.text  model=".author" id="author" name="author"
                                        placeholder="Your Name"
                                        className="form-control"
                                        validators={{
                                            required, 
                                            minLength: minLength(2),
                                            maxLength: maxLength(15)
                                        }}
                                    />
                                     <Errors
                                        className="text-danger"
                                        model=".author"
                                        show="touched"
                                        component="div"
                                        messages={{
                                            required: 'Required',
                                            minLength: 'Must be at least 2 characters',
                                            maxLength: 'Must be 15 characters or less'
                                        }}
                                    />
                                </Col>
                            </Row>
                            <Row className="form-group">
                                <Label htmlFor="text" md={2}>Comment</Label>
                                <Col md={10}>
                                    <Control.textarea model=".text" id="text" name="text"
                                        className="form-control" rows="6"
                                        
                                    />
                                </Col>
                            </Row>
                            <Row className="form-group">
                            <Button type="text" outline color="secondary">
                <i className="fas fa-pencil-alt"></i>
                 Submit Comment
            </Button>
                            </Row>
                            

                        </LocalForm>
                        </div>
                                
                            
                   //</ModalBody>
                //</Modal>
           // </React.Fragment>
             );
        }
    
}

    function RenderCampsite({campsite}){
        return (
            <div className="col-md-5 m-1">
                 <Card>
                    <CardImg top src= {campsite.image} alt= {campsite.name} />
                    <CardBody>
                        <CardText>{campsite.description} </CardText>
                    </CardBody>
                </Card>
            </div>
        );
    }

    function RenderComments({comments}) {

        if (comments){
            return(
                <div className="col-md-5 m-1">
                    <h4>Comments</h4>
                    {comments.map(comment => <div key={comments.id}>
                        {comment.text}<br/>
                        {comment.author} - {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}
                        </div>)}
                        <CommentForm />
                </div>
            )
        }
        return <div />;
    }
 
    function CampsiteInfo(props) {
        if (props.campsite) {
            return (
                <div className="container">
                    <div className="row">
                        <div className="col">
                            <Breadcrumb>
                                <BreadcrumbItem><Link to="/directory">Directory</Link></BreadcrumbItem>
                                <BreadcrumbItem active>{props.campsite.name}</BreadcrumbItem>
                            </Breadcrumb>
                            <h2>{props.campsite.name}</h2>
                            <hr />
                        </div>
                    </div>

                    <div className="row">
                        <RenderCampsite campsite={props.campsite} />
                        <RenderComments comments={props.comments} />
                    </div>
                </div>
            );
        }
        return <div />;
    }
    